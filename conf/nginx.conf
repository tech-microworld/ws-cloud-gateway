# nginx

pid logs/nginx.pid;
# 开发时可以设置成 debug
error_log   logs/error.log notice;

master_process on;

# 生成环境设置成 auto
# worker_processes auto;
worker_processes 2;

# 最大文件描述符数量
worker_rlimit_nofile 10240;
worker_rlimit_core  4G;
# 工作进程关闭超时时间
worker_shutdown_timeout 3;

events {
    accept_mutex off;
    worker_connections  10240;
}

http {

    include mime.types;
    default_type  application/json;

    include common/logformat.conf;

    server_tokens off;
    more_set_headers 'Server: Ws-Cloud-Gateway';

    sendfile        on;
    tcp_nopush      on;
    # aio             on;

    #keepalive_timeout  0;
    keepalive_timeout 60s;
    client_header_timeout 60s;
    client_body_timeout 60s;
    send_timeout 10s;

    # 避免正则回溯问题
    lua_regex_match_limit 100000;
    lua_regex_cache_max_entries 8192;

    lua_http10_buffering off;

    # 全局缓存定义
    lua_shared_dict upstream_type_cache 10m;
    lua_shared_dict timer_lock 10m;
    lua_shared_dict lrucache_lock 10m;
    lua_shared_dict worker-events 10m;
    lua_shared_dict healthcheck_shm 10m;

    #最大等待任务数
    lua_max_pending_timers 1024;
    #最大同时运行任务数
    lua_max_running_timers 256;


    #lua库依赖路径
    lua_package_path "${prefix}deps/share/lua/5.1/?.lua;${prefix}deps/share/lua/5.1/?/init.lua;${prefix}gateway/?.lua;${prefix}gateway/?/init.lua;;";
    lua_package_cpath "${prefix}deps/lib64/lua/5.1/?.so;${prefix}deps/lib/lua/5.1/?.so;;";

    # 在生产环境上务必确保 lua_code_cache 设置成 on。
    lua_code_cache on;

    # 初始化脚本
    init_by_lua_block {
        local app = require("app")
        app.http_init()

    }

    init_worker_by_lua_block {
        local app = require("app")
        local admin = require("admin")

        app.http_init_worker()
        admin.init_worker()
    }


    include common/gzip.conf;
    include servers/*.conf;


}
